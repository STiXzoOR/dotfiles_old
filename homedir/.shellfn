
# Add to path
prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_"
}

# Create a new git repo with one README commit and CD into it
function gitnr() {
  mkdir $1
  cd $1
  git init
  touch README.md
  git add README.md
  git commit -minitial-commit
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Fix file permissions
function fix-perms() {
  find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

# Output directory/file tree, excluding ignorables
function tre() {
  tree -aC -I '.git|node_modules|bower_components|.DS_Store' --dirsfirst "$@"
}

# Download youtube videos in a breeze
function yt-download() {
  youtube-dl -o "${HOME}/Desktop/%(title)s.%(ext)s" "$1"
}

# Generate .gitignore file
function gen-git-ignore() {
  curl -sL https://www.toptal.com/developers/gitignore/api/$@
}

# Get weather information for a given country/city
# usage: weather Cyprus
function weather() {
  curl wttr.in/$1
}

# Get information for a given ip address
# usage: ip-info 123.456.789.0
function ipinfo() {
  curl ipinfo.io/$1
}

# Create a data URL from a file
function data-url() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Get the ip address from hostname
# usage: hostname2ip google.com
hostname2ip() {
  ping -c 1 "$1" | egrep -m1 -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

# Upload file to transfer.sh
# https://github.com/dutchcoders/transfer.sh/
transfer() {
  tmpfile=$( mktemp -t transferXXX )
  curl --progress-bar --upload-file "$1" https://transfer.sh/$(basename $1) >> $tmpfile;
  cat $tmpfile;
  rm -f $tmpfile;
}

# Find real address from shortened url
unshorten() {
  curl -sIL $1 | sed -n 's/Location: *//p'
}

# Use Mac OS Preview to open a man page in a more handsome format
function manp() {
  man -t $1 | open -f -a /Applications/Preview.app
}

# Hide shadow under screenshots
function hide-screenshot-shadow() {
    defaults write com.apple.screencapture disable-shadow -bool true
}

# Show (back to defaults) shadow under screenshots
function show-screenshot-shadow() {
  defaults write com.apple.screencapture disable-shadow -bool false
}

# Show normally hidden system and dotfile types of files
# in Mac OS Finder
function show-hidden-files() {
  defaults write com.apple.Finder AppleShowAllFiles YES
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

# Hide (back to defaults) normally hidden system and dotfile types of files
# in Mac OS Finder
function hide-hidden-files() {
  defaults write com.apple.Finder AppleShowAllFiles NO
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

## Hammer a service with curl for a given number of times
## usage: curlhammer $url
function curlhammer() {
  bot "about to hammer $1 with $2 curls â‡’"
  echo "curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'"
  for i in {1..$2}; do
    curl -k -s -D - $1 -o /dev/null | grep 'HTTP/1.1' | sed 's/HTTP\/1.1 //'
  done
  bot "done"
}

## Curlheader will return only a specific response header or all response headers for a given URL
## usage: curlheader $header $url
## usage: curlheader $url
function curlheader() {
  if [[ -z "$2" ]]; then
    echo "curl -k -s -D - $1 -o /dev/null"
    curl -k -s -D - $1 -o /dev/null:
  else
    echo "curl -k -s -D - $2 -o /dev/null | grep $1:"
    curl -k -s -D - $2 -o /dev/null | grep $1:
  fi
}

## Get the timings for a curl to a URL
## usage: curltime $url
function curltime() {
  curl -w "   time_namelookup:  %{time_namelookup}\n\
      time_connect:  %{time_connect}\n\
   time_appconnect:  %{time_appconnect}\n\
  time_pretransfer:  %{time_pretransfer}\n\
     time_redirect:  %{time_redirect}\n\
time_starttransfer:  %{time_starttransfer}\n\
--------------------------\n\
        time_total:  %{time_total}\n" -o /dev/null -s "$1"
}

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fo() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Deduplicate path variables
function dedup-pathvar() {
  function get-var() {
    eval 'printf "%s\n" "${'"$1"'}"'
  }

  function set-var() {
    eval "$1=\"\$2\""
  }

  pathvar_name="$1"
  pathvar_value="$(get-var "$pathvar_name")"
  deduped_path="$(perl -e 'print join(":",grep { not $seen{$_}++ } split(/:/, $ARGV[0]))' "$pathvar_value")"
  set-var "$pathvar_name" "$deduped_path"
}

# Change iTerm preset theme
function set-preset() {
  local theme_changed=false

  if [[ "$1" == "Dracula" || "$1" == "Dracula Pro" ]]; then
    git config --global color.status.added 071
    git config --global color.status.changed 185
    git config --global color.status.untracked 004
    theme_changed=true
  elif [[ "$1" == "Nord" ]]; then
    git config --global color.status.added 036
    git config --global color.status.changed 003
    git config --global color.status.untracked 105
    theme_changed=true
  fi

  if [[ "$theme_changed" == "true" ]]; then
    export SHELL_THEME="$1"
    export BAT_THEME="$1"
    git config --global delta.syntax-theme $1
    echo -e "\033]1337;SetColors=preset=$1\a"
    [[ ! -f "${HOME}/.p10k.zsh" ]] || source "${HOME}/.p10k.zsh"
  fi
}


# Show 256 TERM colors
colors() {
  local X=$(tput op)
  local Y=$(printf %$((COLUMNS-6))s)
  for i in {0..256}; do
  o=00$i;
  echo -e ${o:${#o}-3:3} $(tput setaf $i;tput setab $i)${Y// /=}$X;
  done
}


# Do a Matrix movie effect of falling characters
function matrix1() {
  echo -e "\e[1;40m"
  clear
  while :; do
    echo $LINES $COLUMNS $(($RANDOM % $COLUMNS)) $(($RANDOM % 72))
    sleep 0.05
  done | gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

function matrix2() {
  echo -e "\e[1;40m"
  clear
  characters=$(jot -c 94 33 | tr -d '\n')
  while :; do
    echo $LINES $COLUMNS $(($RANDOM % $COLUMNS)) $(($RANDOM % 72)) $characters
    sleep 0.05
  done | gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}
